#!/usr/bin/python3

# Copyright (c) 2021, AT&T Intellectual Property.
# All rights reserved.
#
# SPDX-License-Identifier: GPL-2.0-only
#

import argparse
import re
import os
import sys
import io
from syslog import LOG_DAEMON, LOG_WARNING, LOG_DEBUG, syslog
import subprocess
import tempfile

from vyatta import configd

MONITOR_CONFIG_ROOT = 'system storage monitor'


FSMON_SERVICE = 'vyatta-fs-monitor.service'
FSMON_CFGFILE = '/run/vyatta-fs-monitor/fsmon.conf'
FSMON_CFGFILE_PREAMBLE = '''
# Generated by vyatta-fs-monitor - DO NOT EDIT
interval = 120
default_priority = "warning"
default_facility = "daemon"

'''


class Filesystem:
    def __init__(self, name=None, events=[], cfg=None):
        self.mountpoint = name
        self.events = events

    def add_event(self, event):
        self.events.append(event);


    def write_cfg(self, dest):
        print('filesystem {', file=dest)
        print('  mountpoint = "{}"'.format(self.mountpoint), file=dest)
        for event in self.events:
            event.write_cfg(dest)
        print('}', file=dest)


class FSEvent:
    def __init__(self, event_type ,facility, priority, percent=0.0):
        self.event_type = event_type
        self.priority = priority
        self.facility = facility
        self.percent = percent

    def write_cfg(self, dest):
        print('  event {', file=dest)
        print('    type = "{}"'.format(self.event_type), file=dest)
        print('    priority = "{}"'.format(self.priority), file=dest)
        print('    facility = "{}"'.format(self.facility), file=dest)
        print('    percent = {}'.format(self.percent), file=dest)
        print('  }', file=dest)

def fs_monitor_ctl(cmd='start'):
    if not cmd in {'start', 'stop', 'reload-or-restart'}:
        return

    service = FSMON_SERVICE
    try:
        r = subprocess.run([ 'systemctl', cmd, service ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
    except subprocess.CalledProcessError as e:
        print("Can't {} {}: {}".format(cmd, service, e.stderr.decode()), file=sys.stderr)
        return

def is_mountpoint(path):
    try:
        path = os.path.realpath(path)
        subprocess.check_call(['mountpoint', '-q', path])
        return True
    except subprocess.CalledProcessError:
        return None

def get_syslog_facility_prio(cfg):
    if not cfg:
        return None, None
    try:
        return (cfg[k] for k in ('facility', 'level'))
    except:
        return None, None

def save_fsmon_cfg(fslist, cfgfile):
    dname = os.path.dirname(cfgfile)
    os.makedirs(dname, exist_ok = True)
    tmpcfgf = tempfile.NamedTemporaryFile('w', dir=dname, delete=False)
    with tmpcfgf:
        tmpcfgf.write(FSMON_CFGFILE_PREAMBLE)
        for fs in fslist:
            fs.write_cfg(tmpcfgf)
    os.rename(tmpcfgf.name, cfgfile)

def cfg_event_remount(cfg):
    if not cfg:
        return None
    facility, prio = get_syslog_facility_prio(cfg.get('syslog'))
    if facility is None or prio is None:
        return None
    return FSEvent('ro_remount', facility, prio)

def cfg_event_usage(cfg):
    if not cfg:
        return []
    outev_list = []
    thresholds = cfg.get('threshold')
    for t in thresholds:
        facility, prio = get_syslog_facility_prio(t.get('syslog'))
        percent = t.get('percent')
        if percent is not None:
            percent = float(percent)
        outev_list.append(FSEvent('high_usage', facility, prio, percent))
    return outev_list

def cfg_filesystem(cfg):
    if not cfg:
        return []
    outfslist = []
    for cfg_fs in cfg:
        mountpoint = cfg_fs.get('mountpoint')
        if not is_mountpoint(mountpoint):
            print("will ignore {}: is not a mountpoint".format(mountpoint), file=sys.stderr)
        events = cfg_event_usage(cfg_fs.get('space-usage'))
        ev_remount = cfg_event_remount(cfg_fs.get('read-only-remount'))
        if ev_remount:
            events.append(ev_remount)
        outfslist.append(Filesystem(mountpoint, events))
    return outfslist

def get_fs_monitor_config(cfgfile=FSMON_CFGFILE):
    client = configd.Client()
    if not client.node_exists(client.AUTO, MONITOR_CONFIG_ROOT):
        return []

    try:
        cfg = client.tree_get_dict(MONITOR_CONFIG_ROOT)
    except Exception as e:
        print("Treeget failed'{}': '{}'".format(MONITOR_CONFIG_ROOT, e))
        return []

    try:
        cfg_fs = cfg['monitor']['file-system']
    except KeyError as e:
        return None
    return cfg_filesystem(cfg_fs)

def update_fs_monitor(fslist, cfgfile):
    if not fslist:
        fs_monitor_ctl('stop')
        os.remove(cfgfile)
        return

    save_fsmon_cfg(fslist, cfgfile)
    fs_monitor_ctl('reload-or-restart')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Vyatta Filesystem Monitor Configuration Command.")
    parser.add_argument('-c', '--config', default=FSMON_CFGFILE, help='configuration file')
    parser.add_argument('-u', '--update', help='update configuration')
    args = parser.parse_args()


    fslist = get_fs_monitor_config(args.config)
    update_fs_monitor(fslist, args.config)


